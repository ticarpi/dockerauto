{
    "dockeritems": {
        "jwt_tool": ["A tool for hacking JWT", "docker run -it --network \"host\" --rm -v \"${PWD}:/tmp\" -v \"${HOME}/.jwt_tool:/root/.jwt_tool\" ticarpi/jwt_tool", "-h", ["DockerHub", "ticarpi/jwt_tool"], {}, "", "tool"],
        "cme": ["AKA CrackMapExec: An AD pentesting tool - SMB/LDAP/MSSQL/etc.", "docker run -it --rm --name crackmapexec -v \"${HOME}/.cme:/root/.cme\" -v \"${PWD}:/tmp\" byt3bl33d3r/crackmapexec", "-h; PWD mapped to /tmp", ["DockerHub", "byt3bl33d3r/crackmapexec"], {}, "", "tool"],
        "cmedb": ["The CrackMapExec database for creds and other ouput from the tool", "docker run -it --rm --name crackmapexec -v \"${HOME}/.cme:/root/.cme\" -v \"${PWD}:/tmp\" --entrypoint=/usr/local/bin/cmedb byt3bl33d3r/crackmapexec", "-h; PWD mapped to /tmp", ["None", "byt3bl33d3r/crackmapexec"], {}, "", "tool"],
        "impacket": ["The Impacket toolkit for internal pentesting", "docker run -it --rm -p 445:445 -p 80:80 -p 443:443 -v \"${PWD}:/tmp\" -w /opt/impacket/examples impacket", "-h;examples/ directory is at /opt/impacket/examples/", ["GitHub", "impacket", "https://www.github.com/SecureAuthCorp/impacket"], {
                "Dockerfile": "RlJPTSBweXRob246My44LWFscGluZSBhcyBjb21waWxlCldPUktESVIgL29wdApSVU4gYXBrIGFkZCAtLW5vLWNhY2hlIGdpdCBnY2MgbXVzbC1kZXYgcHl0aG9uMy1kZXYgbGliZmZpLWRldiBvcGVuc3NsLWRldiBjYXJnbwpBREQgLiAvb3B0L2ltcGFja2V0CldPUktESVIgL29wdC9pbXBhY2tldApSVU4gcHl0aG9uMyAtbSBwaXAgaW5zdGFsbCAtciByZXF1aXJlbWVudHMudHh0ClJVTiBweXRob24zIHNldHVwLnB5IGluc3RhbGwKV09SS0RJUiAvb3B0L2ltcGFja2V0L2V4YW1wbGVzCkVOVFJZUE9JTlQgWyJweXRob24zIl0="
            }, 1698248418, "tool"],
        "responder": ["Responder.py - a tool for replaying and relaying hashes on a variety of services for internal pentesting", "docker run -it --rm --network host responder", "-h;LM Challenge already set for the https://crack.sh rainbow tables", ["GitHub", "responder", "https://www.github.com/lgandx/Responder"], {
                "Dockerfile": "RlJPTSBweXRob246My44LWFscGluZQpXT1JLRElSIC9vcHQKQ09QWSAuIC9vcHQvUmVzcG9uZGVyCldPUktESVIgL29wdC9SZXNwb25kZXIKUlVOIHNlZCAicy9DaGFsbGVuZ2UgPSBSYW5kb20vQ2hhbGxlbmdlID0gMTEyMjMzNDQ1NTY2Nzc4OC8iIFJlc3BvbmRlci5jb25mIC1pClJVTiBhcGsgYWRkIC0tbm8tY2FjaGUgZ2l0IGdjYyBtdXNsLWRldiBweXRob24zLWRldiBsaWJmZmktZGV2IG9wZW5zc2wtZGV2IGNhcmdvClJVTiBweXRob24zIC1tIHBpcCBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHQKRU5UUllQT0lOVCBbInB5dGhvbjMiLCJSZXNwb25kZXIucHkiXQ=="
            }, 1698249112, "tool"],
        "nmap": ["Network port scanner", "docker run -it --rm --name nmap secsi/nmap", "-h", ["DockerHub", "secsi/nmap"], {}, "", "tool"],
        "ffuf": ["Web directory fuzzer, scanner, brute-forcer", "docker run -it --rm --name ffuf -v \"${PWD}:/tmp\" ffuf -c", "-h Seclists is at: /opt/SecLists/; -w /opt/SecLists/Discovery/Web-Content/raft-{small/medium/large}-{files/words/directories}.txt; -u https://example.com/FUZZ; Filter/Match: -fc/-mc (status code), -fs/-ms (size), -fr/-mr (regex); -c (colourise output); -of csv -o /tmp/ffuf.csv; curl-like: -X GET, -H \"Header: here\", -r (follow redirects), -x http://localhost:8080", ["Dockerfile", "ffuf"], {
                "Dockerfile": "RlJPTSBnb2xhbmc6MS4yMQoKV09SS0RJUiAvb3B0ClJVTiBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2RhbmllbG1pZXNzbGVyL1NlY0xpc3RzCgpXT1JLRElSIC9nbwpSVU4gZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9mZnVmL2ZmdWYKCldPUktESVIgL2dvL2ZmdWYKUlVOIGdvIGJ1aWxkIC12IC1vIC91c3IvbG9jYWwvYmluL2ZmdWYKCkVOVFJZUE9JTlQgWyJmZnVmIl0KCgo="
            }, 1698270630, "tool"],
        "nikto": ["Web configuration vulnerability scanner", "docker run -it --rm --name nikto -v \"${PWD}:/tmp\" nikto", "-h; PWD mapped to /tmp; -host example.com -port 443 -ssl -output /tmp/nikto.xml", ["GitHub", "nikto", "https://www.github.com/sullo/nikto"], {}, 1698272481, "tool"],
        "sqlmap": ["SQL Injection scanner", "docker run -it --rm --name sqlmap secsi/sqlmap", "-h", ["DockerHub", "secsi/sqlmap"], {}, "", "tool"],
        "testssl": ["SSL/TLS config scanner", "docker run --rm -ti -v \"${PWD}:/tmp\" -w /tmp drwetter/testssl.sh --html --json", "--help; PWD mapped to /tmp; target should be HOSTNAME:PORT and be the last parameter", ["DockerHub", "drwetter/testssl.sh"], {}, "", "tool"]
    }
}
